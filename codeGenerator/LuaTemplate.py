#coding=utf8
__author__ = 'Administrator'

LUA_H_CODES_TEMPLATE = '''
/**
  WARNING :
  This file is generated by python script.
  DO NOT MODIFY!
*/

#ifndef {{ServiceName}}_{{tag}}_lua_H_
#define {{ServiceName}}_{{tag}}_lua_H_
{{IncludeLuaFiles}}

namespace {{Namespace}} {
    {{ExportMacro}} bool init_{{ServiceName}}(lua_State* state);
    
    //应张金要求添加    
    {{StructsDeclear}}
    {{EnumsDeclear}}
}

#endif
'''


LUA_CODES_TEMPLATE = '''\
#include "common/Stdafx.h"
#include "rpc_{{ServiceName}}.h"
#include "rpc_{{ServiceName}}_lua.h"
#include <luabind/luabind.hpp>

namespace {{Namespace}}
{
    bool init_{{ServiceName}}(lua_State* state)
    {
        using namespace luabind;
        luabind::object global = luabind::globals(state);

        // 常量绑定
        {{ConstCodes}}

        // IData数据中Struct相关的Int绑定
        {{StructIdCodes}}

        // 类定义
        {{BindFuncs}}

        return true;
    }

    // IData结构成员绑定
    {{StructBindCodes}}

    // 普通结构成员绑定
    {{StructCommonBindCodes}}

    // Enum绑定
    {{EnumCodes}}
}
'''

# IData结构
STRUCT_BIND_TEMPLATE = '''\
void bind_struct_{{StructName}}(lua_State* state)
{
    using namespace luabind;
    module(state)
    [
        class_<{{StructName}}, {{StructName}}Ptr, {{BaseType}}, {{BaseType}}Ptr>("{{StructName}}")
        .def(constructor<>())
        {{FieldDefCodes}}
        .def("getStructDes", &{{StructName}}::getStructDes)
        .def("getBool", &{{StructName}}::getBool)
        .def("getInt", &{{StructName}}::getInt)
        .def("getDouble", &{{StructName}}::getDouble)
        .def("getString", &{{StructName}}::getString)
        .def("getVBool", &{{StructName}}::getVBool)
        .def("getVInt", &{{StructName}}::getVInt)
        .def("getVDouble", &{{StructName}}::getVDouble)
        .def("getVString", &{{StructName}}::getVString)
        .def("getKey", &{{StructName}}::getKey)
        .def("bsonValueFromObj", &{{StructName}}::bsonValueFromObj)
        .def("toString", &{{StructName}}::toString),
        class_< vector<{{StructName}}Ptr> >("{{StructName}}Vec")
        .def(constructor<>())
        .def("size", (size_t (vector<{{StructName}}Ptr>::*)())&std::vector<{{StructName}}Ptr>::size)
        .def("at", ({{StructName}}Ptr& (vector<{{StructName}}Ptr>::*)(size_t))&std::vector<{{StructName}}Ptr>::at)
        .def("push_back", (void (vector<{{StructName}}Ptr>::*)(const {{StructName}}Ptr&))&std::vector<{{StructName}}Ptr>::push_back),
        class_< vector<{{StructName}}> >("{{StructName}}ObjVec")
        .def(constructor<>())
        .def("size", (size_t (vector<{{StructName}}>::*)())&std::vector<{{StructName}}>::size)
        .def("at", ({{StructName}}& (vector<{{StructName}}>::*)(size_t))&std::vector<{{StructName}}>::at)
        .def("push_back", (void (vector<{{StructName}}>::*)(const {{StructName}}&))&std::vector<{{StructName}}>::push_back)
    ];

    // 结构类型绑定
    luabind::object global = luabind::globals(state);
    {{StructFiledIdCodes}}

    // NULL
    global["{{StructName}}_NULL"] = {{StructName}}Ptr();
}
'''

# 普通结构
STRUCT_COMMON_BIND_TEMPLATE = '''\
void bind_struct_{{StructName}}(lua_State* state)
{
    using namespace luabind;
    module(state)
    [
    class_<{{StructName}}>("{{StructName}}")
    .def(constructor<>())
    {{FieldDefCodes}}\Declears
    ];
    luabind::object global = luabind::globals(state);
    global["{{StructName}}_NULL"] = {{StructName}}Ptr();
}
'''

ENUM_BIND_TEMPLATE = '''\
void bind_struct_{{StructName}}(lua_State* state)
{
    using namespace luabind;
    luabind::object global = luabind::globals(state);
    {{EnumFieldsCodes}}
}
'''
